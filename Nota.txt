---------------------------------------
Servicios de Firebase
---------------------------------------
Authentication => autenticarse
Database => Utilizar base de datos
Storage => para almacenar archivos
Hosting => Subir aplicacion o sitios web
Functions => Ejecutar funciones o codigo en la nube
Machine Learning => para automatizar las tareas o bots

--------------------------------------
Algunas Funciones de JavaScript
--------------------------------------
-toString() => Convierte un Numero a String.
-parseInt() => Convierte un String a Numero.
-toLowerCase() => Convierte a minuscula.
-toUpperCase() => Convierte a mayuscula.
-push() => Inserta datos a un arreglo.
-charCodeAt() => Devuelve el Codigo del Caracter
-indexOf() => Buscar una palabra en una cadena, en caso no encuentre devuelve -1


===== Funcion Join ================================================
-join() => permite unir caracteres de un array a un texto.
    
    var foo = [ 'Once', 'upon', 'a', 'time' ];
    console.log( foo.join( " " ) ); // Once upon a time
    console.log( foo.join( "-" ) ); // Once-upon-a-time


===== Funcion Reverse ================================================
-reverse() => invierte el orden de los elementos de un array, 
              el primer elemento pasa ser el ultimo 
              y el ultimo pasa ser el primero

     const a = [1, 2, 3];
     console.log(a); // [1, 2, 3]

     a.reverse();
     console.log(a); // [3, 2, 1]

     const nombre = ["jon", "eung", "nikone"];
     nombre.reverse();
     console.log(nombre) // ["nikone", "eung", "jon"]


===== Funcion Split ================================================
-split() => divide una cadena de caracteres en varios bloques 
            y crea un array con estos.

    'Podemos usar split para obtener las palabras de una oración'.split(' ')
    // [ "Podemos", "usar", "split", "para", "obtener", "las", "palabras", "de", "una", "oración" ]

    'javascript,split,snippet,samples'.split(',')
    // [ "javascript", "split", "snippet", "samples" ]


===== Funcion Sort ================================================
-sort() => Ordena los elementos de un arreglo conviertiendoles a String.

    var frutas = ['guindas', 'manzanas', 'bananas'];
    frutas.sort(); 
    // ['bananas', 'guindas', 'manzanas']

    var puntos = [1, 10, 2, 21]; 
    puntos.sort(); 
    // [1, 10, 2, 21]

    /*** Para Ordernar Numeros ***/
    var numbers = [4, 2, 5, 1, 3];
    numbers.sort((a, b) =>  a - b);
    console.log(numbers)
    // [1, 2, 3, 4, 5]


===== Funcion Reduce ================================================
*-reduce() => permite aplicar una funcion a un acumulador y cada valor de una array
              (de izquierda a derecha) para reducirlo a un unico valor

    const suma = [10, 20, 30].reduce((a, b) => a + b);
    console.log(suma); // suma = 60 ==> a=10, b=20; ==> a=30, b=30 ==> a+b => 60

    const nombres = ['Jorge', 'Maria', 'Jose', 'Bod', 'Pat', 'Maria', 'Jose', 'Jose'];
    const cantidadNombres = nombres.reduce((contadorNombre, nombre) => {
        contadorNombre[nombre] = (contadorNombre[nombre] || 0) + 1;
        return contadorNombre;
    }, {});

    console.log(cantidadNombres);
    // {Bod: 1, Jorge: 1, Jose: 3, Maria: 2, Pat: 1}


===== Funcion Filter ================================================
*-filter() => permite filtrar los elementos de un array y 
              generar uno nuevo con los elementos que cumplen una determinada condicion

    let numArray = [1,2,3,4,5,6,7,8,9,10] 
    let filterNumArray = numArray.filter(element => element > 5)

    console.log("numArray => ", numArray)
    console.log("filterNumArray => ", filterNumArray)
    //Output
    //numArray =>  [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    //filterNumArray =>  [ 6, 7, 8, 9, 10 ]


===== Funcion Slice ================================================
-slice() => Toma un trozo de un array, indicando por un indice de inicio y final

    // constante para mejor legibilidad de los ejemplos
    const _ = undefined

    // Ejemplos con números
    // Tomar los n primeros elementos
    [0,1,2,3,4,5,6,7,8].slice(_,5)
    // [0,1,2,3,4]

    // comienzo y final del slice
    [0,1,2,3,4,5,6,7,8].slice(3,5)
    // [3,4]

    // Tomar elementos del final
    [0,1,2,3,4,5,6,7,8].slice(-2)
    // [7,8]

    // Puedes usar slice con arrays con valores de cualquier tipo de datos escalar
    const computerScientists = ['John Hughes', 'Ada Lovelace', 'Barbara Liskov', 'Grace Hopper', 'Alan Key', 'John McCarthy']

    computerScientists.slice(1, 4)
    // [ "Ada Lovelace", "Barbara Liskov", "Grace Hopper" ]

    computerScientists.slice(_, 3)
    // [ "John Hughes", "Ada Lovelace", "Barbara Liskov" ]

    computerScientists.slice(-2)
    // [ "Alan Key", "John McCarthy" ]

    // Clonar un array de valores con slice
    computerScientists.slice()
    // ['John Hughes', 'Ada Lovelace', 'Barbara Liskov', 'Grace Hopper', 'Alan Key', 'John McCarthy']

    // ¡¡ Pero ojo con los objetos !!
    const punto1 = {x: 5, y: 10};
    const punto2 = {x: 8, y: 8};
    [punto1, punto2].slice()
    // [ Object, Object ]
    [punto1, punto2].slice()[0].x = 7;
    punto1
    // { x: 7, y: 10 } ¡¡Hemos modificado 'punto1'!!


===== Funcion Splice  ================================================
-splice() => Cambia el contenido de un array eliminando elementos existentes y/o 
             agregando nuevos elementos

    /**** Insertar ****/
    const months = ['Jan', 'March', 'April', 'June'];
    months.splice(1, 0, 'Feb');
    // inserts at index 1
    console.log(months);
    // expected output: Array ["Jan", "Feb", "March", "April", "June"]

    /*** Reemplazar ****/
    months.splice(4, 1, 'May');
    // replaces 1 element at index 4
    console.log(months);
    // expected output: Array ["Jan", "Feb", "March", "April", "May"]

    /*** Eliminar ***/
    var myFish = ['angel', 'clown', 'drum', 'mandarin', 'sturgeon'];
    var removed = myFish.splice(3, 1);
    // removed is ["mandarin"]
    // myFish is ["angel", "clown", "drum", "sturgeon"]

    /*** Eliminar 2 elementos y reemplazar por tres elementos ***/
    var myFish = ['angel', 'clown', 'trumpet', 'sturgeon'];
    var removed = myFish.splice(0, 2, 'parrot', 'anemone', 'blue');
    // myFish is ["parrot", "anemone", "blue", "trumpet", "sturgeon"] 
    // removed is ["angel", "clown"]

    /*** Eliminar todo los elementos tras el indice 2 ***/
    var myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];
    var removed = myFish.splice(2);
    // myFish is ["angel", "clown"] 
    // removed is ["mandarin", "sturgeon"]


===== Funcion Find  ================================================
-find() => con la ayuda del metodo Find podemos encontrar el primer valor
           que cumpla con funcion que definimos
        
    const numeros = [14, 123, 50, 20, 312];
    const myVal = numeros.find((element) => element > 100);
    console.log(myVal)
    // Output: 123

    const inventario = [
        {nombre: 'manzanas', cantidad: 2},
        {nombre: 'bananas', cantidad: 0},
        {nombre: 'cerezas', cantidad: 5}
    ];
    const resultado = inventario.find(fruta => fruta.nombre === 'cerezas');
    console.log(resultado)
    // {nombre: 'cerezas', cantidad: 5}


===== Funcion Map  ================================================
-*map() => El metodo map crea un nuevo array con los resultados de la
           llamada a la funcion indicada aplicados a cada uno de sus
           elementos

    const numeros = [1, 2, 3, 4, 5];
    const miles = numeros.map((elemento) => elemento * 1000);
    console.log(miles);
    // Output: [1000, 2000, 3000, 4000, 5000]


===== Funcion Replace  ================================================
-replace() => El metodo replace devuelve una nueva cadena con algunas o
              todas las coincidencias de un patron.

    const p = 'el rapido zorro salta sobre un perro. el perro no reacciono';

    const regex = /perro/gi;

    console.log(p.replace(regex, 'loro'));
    // expected output: 'el rapido zorro salta sobre un loro. el loro no reacciono'

    console.log(p.replace('perro', 'mono'));
    // expected output: 'el rapido zorro salta sobre un mono. el perro no reacciono'


===== Funcion Concat  ================================================
-concat() => El metodo concat se utiliza para combinar dos o mas cadenas.
             Este metodo no cambia las cadenas existentes, sino
             que retorna una nueva cadena

    cadena1 = "Oh "
    cadena2 = "que maravillosa "
    cadena3 = "mañana."

    cadena4 = cadena1.concat(cadena2, cadena3)
    console.log(cadena4)
    // devuelve "Oh qué maravillosa mañana."


===== Funcion Substring  ================================================
-substring() => pinta los caracteres extraidos
                metodo devuelve un subconjunto de un objeto

    var nombre = "Mozilla";

    console.log(nombre.substring(0,3))
    // Moz

    console.log(nombre.substring(4,7))
    // lla

    console.log(nombre.substring(0,6))
    // Mozill


-exec