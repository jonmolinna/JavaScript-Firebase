---------------------------------------
Servicios de Firebase
---------------------------------------
Authentication => autenticarse
Database => Utilizar base de datos
Storage => para almacenar archivos
Hosting => Subir aplicacion o sitios web
Functions => Ejecutar funciones o codigo en la nube
Machine Learning => para automatizar las tareas o bots

--------------------------------------
Algunas Funciones de JavaScript
--------------------------------------
-toString() => Convierte un Numero a String.
-parseInt() => Convierte un String a Numero.
-toLowerCase() => Convierte a minuscula.
-toUpperCase() => Convierte a mayuscula.
-push() => Inserta datos a un arreglo.

-split() => divide una cadena de caracteres en varios bloques y crea un array con estos.
-reverse() => invierte el orden de los elementos de un arrar, el primer elemento para ser el ultimo y el ultimo pasa ser el primero
-join() => permite unir caracteres de un array a un texto.
-substring() => pinta los caracteres extraidos
-substr() => no pinta los caracteres extraidos de la longitud
-sort() => Ordena los elementos de un arreglo conviertiendoles a String.

===== Funcion Reduce ================================================
*-reduce() => permite aplicar una funcion a un acumulador y cada valor de una array
              (de izquierda a derecha) para reducirlo a un unico valor

    const suma = [10, 20, 30].reduce((a, b) => a + b);
    console.log(suma); // suma = 60 ==> a=10, b=20; ==> a=30, b=30 ==> a+b => 60

    const nombres = ['Jorge', 'Maria', 'Jose', 'Bod', 'Pat', 'Maria', 'Jose', 'Jose'];
    const cantidadNombres = nombres.reduce((contadorNombre, nombre) => {
        contadorNombre[nombre] = (contadorNombre[nombre] || 0) + 1;
        return contadorNombre;
    }, {});

    console.log(cantidadNombres);
    // {Bod: 1, Jorge: 1, Jose: 3, Maria: 2, Pat: 1}


===== Funcion Filter ================================================
*-filter() => permite filtrar los elementos de un array y 
              generar uno nuevo con los elementos que cumplen una determinada condicion

    let numArray = [1,2,3,4,5,6,7,8,9,10] 
    let filterNumArray = numArray.filter(element => element > 5)

    console.log("numArray => ", numArray)
    console.log("filterNumArray => ", filterNumArray)
    //Output
    //numArray =>  [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    //filterNumArray =>  [ 6, 7, 8, 9, 10 ]

===== Funcion Slice ================================================
-slice => Toma un trozo de un array, indicando por un indice de inicio y final

    // constante para mejor legibilidad de los ejemplos
    const _ = undefined

    // Ejemplos con números
    // Tomar los n primeros elementos
    [0,1,2,3,4,5,6,7,8].slice(_,5)
    // [0,1,2,3,4]

    // comienzo y final del slice
    [0,1,2,3,4,5,6,7,8].slice(3,5)
    // [3,4]

    // Tomar elementos del final
    [0,1,2,3,4,5,6,7,8].slice(-2)
    // [7,8]

    // Puedes usar slice con arrays con valores de cualquier tipo de datos escalar
    const computerScientists = ['John Hughes', 'Ada Lovelace', 'Barbara Liskov', 'Grace Hopper', 'Alan Key', 'John McCarthy']

    computerScientists.slice(1, 4)
    // [ "Ada Lovelace", "Barbara Liskov", "Grace Hopper" ]

    computerScientists.slice(_, 3)
    // [ "John Hughes", "Ada Lovelace", "Barbara Liskov" ]

    computerScientists.slice(-2)
    // [ "Alan Key", "John McCarthy" ]

    // Clonar un array de valores con slice
    computerScientists.slice()
    // ['John Hughes', 'Ada Lovelace', 'Barbara Liskov', 'Grace Hopper', 'Alan Key', 'John McCarthy']

    // ¡¡ Pero ojo con los objetos !!
    const punto1 = {x: 5, y: 10};
    const punto2 = {x: 8, y: 8};
    [punto1, punto2].slice()
    // [ Object, Object ]
    [punto1, punto2].slice()[0].x = 7;
    punto1
    // { x: 7, y: 10 } ¡¡Hemos modificado 'punto1'!!


===== Funcion  ================================================

-*map
-find
-populate
-skip
-exec
-limit
-for
-replace
-concat
-Expresiones Regulares